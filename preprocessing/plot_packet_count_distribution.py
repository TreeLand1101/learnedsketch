import argparse
import matplotlib.pyplot as plt
import os

def plot_flows(log, top_k, rank, save_dir):
    flow_data = []

    # Read the log file
    with open(log, 'r') as f:
        lines = f.readlines()

    # Find the starting point for flow analysis
    for line in lines:
        if line.startswith("All Flows by Packet Count:"):
            break

    # Process each flow and its packet count
    for line in lines[lines.index(line) + 1:]:
        if line.strip():
            parts = line.split('->')
            flow = parts[0].split(': ')[1].strip()
            count = int(parts[1].strip().split(': ')[1])
            flow_data.append((flow, count))

    # Get top-k flows by packet count
    top_k_flow_names = [flow[0] for flow in flow_data[:top_k]]
    top_k_flow_packet_counts = [flow[1] for flow in flow_data[:top_k]]

    # Set up base filename for output
    base_name = os.path.splitext(os.path.basename(log))[0]

    # Plot top-k flows
    plt.figure(figsize=(12, 6))
    plt.barh(top_k_flow_names, top_k_flow_packet_counts, color='skyblue')
    plt.xlabel('Packet Count')
    plt.ylabel('Flow')
    plt.title(f'Top {top_k} Flows by Packet Count')
    plt.gca().invert_yaxis()
    plt.tight_layout()

    # Save the figure to the save directory
    if not os.path.exists(save_dir):
        os.makedirs(save_dir)
    plt.savefig(os.path.join(save_dir, f'{base_name}_top_k_packet_counts_per_flow.png'))
    plt.close()

    # Plot ranking by flow count up to the specified rank
    rank_packet_counts = [flow[1] for flow in flow_data[:rank]]

    plt.figure(figsize=(10, 6))
    plt.barh(range(1, rank + 1), rank_packet_counts, color='lightcoral')
    plt.xlabel('Packet Count')
    plt.ylabel('Rank')
    plt.title(f'Rank of Top {rank} Flows by Packet Count')
    plt.gca().invert_yaxis()
    plt.tight_layout()

    # Save the rank plot to the save directory
    plt.savefig(os.path.join(save_dir, f'{base_name}_top_n_flow_ranks.png'))
    plt.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generate plots from flow analysis log.')
    parser.add_argument('--log', type=str, required=True, help='Path to the log file generated by the analysis script.')
    parser.add_argument('--top_k', type=int, default=20, help='Number of top flows to display (default: 20).')
    parser.add_argument('--rank', type=int, default=1000, help='Total rank for flow ranking (default: number of unique flows in log).')
    parser.add_argument('--save', type=str, required=True, help='Directory to save the output plots.')

    args = parser.parse_args()

    # Read unique flow count from the log file
    with open(args.log, 'r') as f:
        for line in f:
            if line.startswith("UniqueFlows:"):
                unique_flows = int(line.split(':')[1].strip())
                break

    # Adjust rank to not exceed the number of unique flows
    args.rank = min(args.rank, unique_flows)

    # Call the plot function with the provided arguments
    plot_flows(args.log, args.top_k, args.rank, args.save)
